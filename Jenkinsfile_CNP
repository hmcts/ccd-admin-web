#!groovy
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ccd-admin-web'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def product = "ccd"
def component = "admin-web"

def secrets = [
    'ccd-${env}': [
        secret('ccd-admin-web-oauth2-client-secret', 'OAUTH2_CLIENT_SECRET'),
        secret('storage-account-primary-connection-string', 'STORAGEACCOUNT_PRIMARY_CONNECTION_STRING'),
        secret('storage-account-secondary-connection-string', 'STORAGEACCOUNT_SECONDARY_CONNECTION_STRING'),
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-admin', 'IDAM_SERVICE_KEY'),
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview': 'aat',
    'spreview': 'saat'
]

withPipeline("nodejs", product, component) {
    onMaster {
        enableSlackNotifications('#ccd-master-builds')
    }
    if (env.BRANCH_NAME == 'develop') {
        enableSlackNotifications('#ccd-develop-builds')
    }
    onDemo {
        enableSlackNotifications('#ccd-demo-builds')
    }
    onPR {
        enableSlackNotifications('#ccd-pr-builds')
    }

    installCharts()
    enableAksStagingDeployment()

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    disableLegacyDeployment()

    afterCheckout {
        sh "yarn cache clean"
    }

    after('build') {
         sh "yarn setup"
    }
}
