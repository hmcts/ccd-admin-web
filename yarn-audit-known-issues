{"type":"auditAdvisory","data":{"resolution":{"id":1080922,"path":"jquery-validation","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.19.4","paths":["jquery-validation"]}],"metadata":null,"vulnerable_versions":"<1.19.5","module_name":"jquery-validation","severity":"moderate","github_advisory_id":"GHSA-ffmh-x56j-9rc3","cves":[],"access":"public","patched_versions":">=1.19.5","cvss":{"score":0,"vectorString":null},"updated":"2022-07-05T22:56:59.000Z","recommendation":"Upgrade to version 1.19.5 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1080922,"references":"- https://github.com/jquery-validation/jquery-validation/security/advisories/GHSA-ffmh-x56j-9rc3\n- https://github.com/advisories/GHSA-ffmh-x56j-9rc3","created":"2022-07-05T22:56:58.000Z","reported_by":null,"title":"Regular Expression Denial of Service in jquery-validation","npm_advisory_id":null,"overview":"**Summary**\n\nThe issue is the same as CVE-2021-43306: An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method\n\nThe fix for CVE-2021-43306, which was suggested by me ([@erik-krogh](https://github.com/erik-krogh)), was incomplete. I didn't know at the time that the fix was incomplete, but the ReDoS analysis in CodeQL has improved since then.\n\n**Details**\nIssue: ReDoS in url2.js (GHSL-2022-039)\n\nBelow is a PoC that contains the relevant regular expression. Run following script with node and you will notice that it doesn't terminate.\n\n```js\nconst reg = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.?)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n\nconst str = \"//\" + \"00\".repeat(50)\n\nconsole.log(reg.test(str));\n...\n```\n\nThe bad fix was identified using CodeQL, and the alert is visible on LGTM.com: https://lgtm.com/projects/g/jquery-validation/jquery-validation/snapshot/fec195de32da23c813b08a6a786a7f1cb6567069/files/src/additional/url2.js?sort=name&dir=ASC&mode=heatmap#x9013eb6c276f2ced:1\nImpact\n\nThis issue may lead to DoS.\nRemediation\n\nThe new vulnerability has since been fixed in the gist that the regular expression was copy-pasted from: https://gist.github.com/dperini/729294#file-regex-weburl-js-L62 So the fix is just to copy-paste that new version (copy pasted below).\n\n```js\n/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n```","url":"https://github.com/advisories/GHSA-ffmh-x56j-9rc3"}}}
