{"type":"auditAdvisory","data":{"resolution":{"id":1080922,"path":"jquery-validation","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.19.4","paths":["jquery-validation"]}],"metadata":null,"vulnerable_versions":"<1.19.5","module_name":"jquery-validation","severity":"moderate","github_advisory_id":"GHSA-ffmh-x56j-9rc3","cves":[],"access":"public","patched_versions":">=1.19.5","cvss":{"score":0,"vectorString":null},"updated":"2022-07-05T22:56:59.000Z","recommendation":"Upgrade to version 1.19.5 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1080922,"references":"- https://github.com/jquery-validation/jquery-validation/security/advisories/GHSA-ffmh-x56j-9rc3\n- https://github.com/advisories/GHSA-ffmh-x56j-9rc3","created":"2022-07-05T22:56:58.000Z","reported_by":null,"title":"Regular Expression Denial of Service in jquery-validation","npm_advisory_id":null,"overview":"**Summary**\n\nThe issue is the same as CVE-2021-43306: An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method\n\nThe fix for CVE-2021-43306, which was suggested by me ([@erik-krogh](https://github.com/erik-krogh)), was incomplete. I didn't know at the time that the fix was incomplete, but the ReDoS analysis in CodeQL has improved since then.\n\n**Details**\nIssue: ReDoS in url2.js (GHSL-2022-039)\n\nBelow is a PoC that contains the relevant regular expression. Run following script with node and you will notice that it doesn't terminate.\n\n```js\nconst reg = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.?)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n\nconst str = \"//\" + \"00\".repeat(50)\n\nconsole.log(reg.test(str));\n...\n```\n\nThe bad fix was identified using CodeQL, and the alert is visible on LGTM.com: https://lgtm.com/projects/g/jquery-validation/jquery-validation/snapshot/fec195de32da23c813b08a6a786a7f1cb6567069/files/src/additional/url2.js?sort=name&dir=ASC&mode=heatmap#x9013eb6c276f2ced:1\nImpact\n\nThis issue may lead to DoS.\nRemediation\n\nThe new vulnerability has since been fixed in the gist that the regular expression was copy-pasted from: https://gist.github.com/dperini/729294#file-regex-weburl-js-L62 So the fix is just to copy-paste that new version (copy pasted below).\n\n```js\n/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n```","url":"https://github.com/advisories/GHSA-ffmh-x56j-9rc3"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1080944,"path":"@hmcts/nodejs-logging>moment","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.29.3","paths":["@hmcts/nodejs-logging>moment","@hmcts/nodejs-healthcheck>@hmcts/nodejs-logging>moment"]}],"metadata":null,"vulnerable_versions":">=2.18.0 <2.29.4","module_name":"moment","severity":"high","github_advisory_id":"GHSA-wc69-rhjr-hc9g","cves":["CVE-2022-31129"],"access":"public","patched_versions":">=2.29.4","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2022-07-06T18:38:49.000Z","recommendation":"Upgrade to version 2.29.4 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1080944,"references":"- https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\n- https://github.com/moment/moment/pull/6015#issuecomment-1152961973\n- https://github.com/moment/moment/commit/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3\n- https://github.com/advisories/GHSA-wc69-rhjr-hc9g","created":"2022-07-06T18:38:49.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in moment","npm_advisory_id":null,"overview":"### Impact\n\n* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs\n* noticeable slowdown is observed with inputs above 10k characters\n* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks\n\n### Patches\nThe problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.\n\n### Workarounds\nIn general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.\n\n### References\nThere is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment-1152961973=\n\n### Details\nThe issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(\"(\".repeat(500000))` will take a few minutes to process, which is unacceptable.","url":"https://github.com/advisories/GHSA-wc69-rhjr-hc9g"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1080944,"path":"@hmcts/nodejs-healthcheck>@hmcts/nodejs-logging>moment","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.29.3","paths":["@hmcts/nodejs-logging>moment","@hmcts/nodejs-healthcheck>@hmcts/nodejs-logging>moment"]}],"metadata":null,"vulnerable_versions":">=2.18.0 <2.29.4","module_name":"moment","severity":"high","github_advisory_id":"GHSA-wc69-rhjr-hc9g","cves":["CVE-2022-31129"],"access":"public","patched_versions":">=2.29.4","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2022-07-06T18:38:49.000Z","recommendation":"Upgrade to version 2.29.4 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1080944,"references":"- https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\n- https://github.com/moment/moment/pull/6015#issuecomment-1152961973\n- https://github.com/moment/moment/commit/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3\n- https://github.com/advisories/GHSA-wc69-rhjr-hc9g","created":"2022-07-06T18:38:49.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in moment","npm_advisory_id":null,"overview":"### Impact\n\n* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs\n* noticeable slowdown is observed with inputs above 10k characters\n* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks\n\n### Patches\nThe problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.\n\n### Workarounds\nIn general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.\n\n### References\nThere is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment-1152961973=\n\n### Details\nThe issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(\"(\".repeat(500000))` will take a few minutes to process, which is unacceptable.","url":"https://github.com/advisories/GHSA-wc69-rhjr-hc9g"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1080966,"path":"node-sass>sass-graph>scss-tokenizer","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"0.3.0","paths":["node-sass>sass-graph>scss-tokenizer"]}],"metadata":null,"vulnerable_versions":"<=0.4.2","module_name":"scss-tokenizer","severity":"moderate","github_advisory_id":"GHSA-7mwh-4pqv-wmr8","cves":["CVE-2022-25758"],"access":"public","patched_versions":"<0.0.0","cvss":{"score":5.3,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"},"updated":"2022-07-06T21:07:15.000Z","recommendation":"None","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1080966,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-25758\n- https://github.com/sasstools/scss-tokenizer/issues/45\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2936782\n- https://snyk.io/vuln/SNYK-JS-SCSSTOKENIZER-2339884\n- https://github.com/advisories/GHSA-7mwh-4pqv-wmr8","created":"2022-07-02T00:00:19.000Z","reported_by":null,"title":"Regular expression denial of service in scss-tokenizer","npm_advisory_id":null,"overview":"All versions of package scss-tokenizer are vulnerable to Regular Expression Denial of Service (ReDoS) via the loadAnnotation() function, due to the usage of insecure regex.","url":"https://github.com/advisories/GHSA-7mwh-4pqv-wmr8"}}}
